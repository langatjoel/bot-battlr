{"ast":null,"code":"var _jsxFileName = \"/home/joel/development/code/bot-battlr/src/components/BotSpecs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotSpecs() {\n  _s();\n  const [bot, setBot] = useState(null);\n  const {\n    botId\n  } = useParams();\n  useEffect(() => {\n    fetch(`http://localhost:3001/bots/${botId}`).then(response => response.json()).then(data => setBot(data)).catch(error => console.error('Error fetching bot specs:', error));\n  }, [botId]);\n  const handleEnlist = enlistedBot => {\n    // Assuming enlistedBots state holds the enlisted bots\n    // You can implement this part according to your actual state management approach\n    setEnlistedBots(prevBots => [...prevBots, enlistedBot]);\n    // Additionally, you can update the server to mark the bot as enlisted\n    fetch(`http://localhost:3001/enlistedBots`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(enlistedBot)\n    }).then(response => response.json()).then(data => console.log('Bot enlisted:', data)).catch(error => console.error('Error enlisting bot:', error));\n  };\n  if (!bot) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 20\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bot-specs\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: bot.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Health: \", bot.health]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Damage: \", bot.damage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Armor: \", bot.armor]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleEnlist(bot),\n      children: \"Enlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(BotSpecs, \"i/N7/kQdI5Cf7npLltVk5zCVDL8=\", false, function () {\n  return [useParams];\n});\n_c = BotSpecs;\nexport default BotSpecs;\nvar _c;\n$RefreshReg$(_c, \"BotSpecs\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","BotSpecs","_s","bot","setBot","botId","fetch","then","response","json","data","catch","error","console","handleEnlist","enlistedBot","setEnlistedBots","prevBots","method","headers","body","JSON","stringify","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","health","damage","armor","onClick","_c","$RefreshReg$"],"sources":["/home/joel/development/code/bot-battlr/src/components/BotSpecs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction BotSpecs() {\n  const [bot, setBot] = useState(null);\n  const { botId } = useParams();\n\n  useEffect(() => {\n    fetch(`http://localhost:3001/bots/${botId}`)\n      .then(response => response.json())\n      .then(data => setBot(data))\n      .catch(error => console.error('Error fetching bot specs:', error));\n  }, [botId]);\n\n  const handleEnlist = (enlistedBot) => {\n    // Assuming enlistedBots state holds the enlisted bots\n    // You can implement this part according to your actual state management approach\n    setEnlistedBots(prevBots => [...prevBots, enlistedBot]);\n    // Additionally, you can update the server to mark the bot as enlisted\n    fetch(`http://localhost:3001/enlistedBots`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(enlistedBot)\n    })\n    .then(response => response.json())\n    .then(data => console.log('Bot enlisted:', data))\n    .catch(error => console.error('Error enlisting bot:', error));\n  };\n\n  if (!bot) return <div>Loading...</div>;\n\n  return (\n    <div className=\"bot-specs\">\n      <h2>{bot.name}</h2>\n      <p>Health: {bot.health}</p>\n      <p>Damage: {bot.damage}</p>\n      <p>Armor: {bot.armor}</p>\n      <button onClick={() => handleEnlist(bot)}>Enlist</button>\n    </div>\n  );\n}\n\nexport default BotSpecs;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}