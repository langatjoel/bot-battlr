{"ast":null,"code":"var _jsxFileName = \"/home/joel/development/code/bot-battlr/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BotCollection from './components/BotCollection';\nimport BotArmy from './components/BotArmy';\nimport BotSpecs from './components/BotSpecs'; // Import BotSpecs component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const botsAPI = 'http://localhost:3000/bots';\n  const [bots, setBots] = useState([]);\n  const [selectedBotId, setSelectedBotId] = useState(null); // State to store the ID of the selected bot\n\n  useEffect(() => {\n    fetch(botsAPI).then(res => res.json()).then(setBots).catch(error => console.error('Error fetching bots:', error));\n  }, []);\n  function enlistBot(id) {\n    setBots(bots.map(bot => id === bot.id ? {\n      ...bot,\n      isEnlisted: true\n    } : bot));\n  }\n  function delistBot(id) {\n    setBots(bots.map(bot => id === bot.id ? {\n      ...bot,\n      isEnlisted: false\n    } : bot));\n  }\n  function dischargeBot(id) {\n    setBots(bots.filter(bot => bot.id === id ? false : true));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BotArmy, {\n      bots: bots.filter(bot => bot.isEnlisted),\n      handleDischarge: dischargeBot,\n      handleClick: delistBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      handleDischarge: dischargeBot,\n      handleClick: id => setSelectedBotId(id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \" \", selectedBotId && /*#__PURE__*/_jsxDEV(BotSpecs, {\n      botId: selectedBotId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fiEq7M1tJZbzoTK6z9gtIKPvTqs=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BotCollection","BotArmy","BotSpecs","jsxDEV","_jsxDEV","App","_s","botsAPI","bots","setBots","selectedBotId","setSelectedBotId","fetch","then","res","json","catch","error","console","enlistBot","id","map","bot","isEnlisted","delistBot","dischargeBot","filter","children","handleDischarge","handleClick","fileName","_jsxFileName","lineNumber","columnNumber","botId","_c","$RefreshReg$"],"sources":["/home/joel/development/code/bot-battlr/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BotCollection from './components/BotCollection';\nimport BotArmy from './components/BotArmy';\nimport BotSpecs from './components/BotSpecs'; // Import BotSpecs component\n\nexport default function App() {\n  const botsAPI = 'http://localhost:3000/bots';\n  const [bots, setBots] = useState([]);\n  const [selectedBotId, setSelectedBotId] = useState(null); // State to store the ID of the selected bot\n\n  useEffect(() => {\n    fetch(botsAPI)\n      .then(res => res.json())\n      .then(setBots)\n      .catch(error => console.error('Error fetching bots:', error));\n  }, []);\n\n  function enlistBot(id) {\n    setBots(bots.map(bot => id === bot.id ? { ...bot, isEnlisted: true } : bot));\n  }\n\n  function delistBot(id) {\n    setBots(bots.map(bot => id === bot.id ? { ...bot, isEnlisted: false } : bot));\n  }\n\n  function dischargeBot(id) {\n    setBots(bots.filter(bot => bot.id === id ? false : true));\n  }\n\n  return (\n    <div>\n      <BotArmy bots={bots.filter(bot => bot.isEnlisted)} handleDischarge={dischargeBot} handleClick={delistBot} />\n      <BotCollection bots={bots} handleDischarge={dischargeBot} handleClick={(id) => setSelectedBotId(id)} /> {/* Pass setSelectedBotId as handleClick */}\n      {selectedBotId && <BotSpecs botId={selectedBotId} />} {/* Render BotSpecs only if selectedBotId is not null */}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAG,4BAA4B;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1DD,SAAS,CAAC,MAAM;IACdc,KAAK,CAACL,OAAO,CAAC,CACXM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACJ,OAAO,CAAC,CACbO,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,SAASE,SAASA,CAACC,EAAE,EAAE;IACrBX,OAAO,CAACD,IAAI,CAACa,GAAG,CAACC,GAAG,IAAIF,EAAE,KAAKE,GAAG,CAACF,EAAE,GAAG;MAAE,GAAGE,GAAG;MAAEC,UAAU,EAAE;IAAK,CAAC,GAAGD,GAAG,CAAC,CAAC;EAC9E;EAEA,SAASE,SAASA,CAACJ,EAAE,EAAE;IACrBX,OAAO,CAACD,IAAI,CAACa,GAAG,CAACC,GAAG,IAAIF,EAAE,KAAKE,GAAG,CAACF,EAAE,GAAG;MAAE,GAAGE,GAAG;MAAEC,UAAU,EAAE;IAAM,CAAC,GAAGD,GAAG,CAAC,CAAC;EAC/E;EAEA,SAASG,YAAYA,CAACL,EAAE,EAAE;IACxBX,OAAO,CAACD,IAAI,CAACkB,MAAM,CAACJ,GAAG,IAAIA,GAAG,CAACF,EAAE,KAAKA,EAAE,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;EAC3D;EAEA,oBACEhB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA,CAACH,OAAO;MAACO,IAAI,EAAEA,IAAI,CAACkB,MAAM,CAACJ,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAE;MAACK,eAAe,EAAEH,YAAa;MAACI,WAAW,EAAEL;IAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5G7B,OAAA,CAACJ,aAAa;MAACQ,IAAI,EAAEA,IAAK;MAACoB,eAAe,EAAEH,YAAa;MAACI,WAAW,EAAGT,EAAE,IAAKT,gBAAgB,CAACS,EAAE;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,EACvGvB,aAAa,iBAAIN,OAAA,CAACF,QAAQ;MAACgC,KAAK,EAAExB;IAAc;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAAC3B,EAAA,CA/BuBD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}